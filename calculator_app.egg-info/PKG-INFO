Metadata-Version: 2.4
Name: calculator-app
Version: 1.0.0
Summary: A professional-grade command-line calculator application
Home-page: https://github.com/kk795-NJIT/IS601_Module4
Author: IS601 Module 4 Assignment
License: MIT
Project-URL: Homepage, https://github.com/kk795-NJIT/IS601_Module4
Project-URL: Repository, https://github.com/kk795-NJIT/IS601_Module4
Classifier: Development Status :: 5 - Production/Stable
Classifier: Intended Audience :: Education
Classifier: License :: OSI Approved :: MIT License
Classifier: Operating System :: OS Independent
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.7
Classifier: Programming Language :: Python :: 3.8
Classifier: Programming Language :: Python :: 3.9
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3.11
Requires-Python: >=3.7
Description-Content-Type: text/markdown
Requires-Dist: pytest>=7.0.0
Requires-Dist: pytest-cov>=4.0.0
Requires-Dist: coverage>=7.0.0
Dynamic: home-page
Dynamic: requires-python

# Professional Calculator Application

A modular, professional-grade command-line calculator application implemented in Python, demonstrating clean architecture, comprehensive error handling, extensive testing, and continuous integration.

## üöÄ Features

- **Interactive REPL Interface**: Read-Eval-Print Loop for continuous user interaction
- **Comprehensive Arithmetic Operations**: Addition, subtraction, multiplication, and division
- **Calculation History**: Maintains session history with easy access to past calculations
- **Robust Error Handling**: Implements both LBYL and EAFP paradigms for comprehensive error management
- **Input Validation**: Validates user inputs and provides helpful feedback
- **Special Commands**: Help, history, clear, and exit commands for enhanced user experience
- **Modular Design**: Clean architecture following object-oriented principles
- **100% Test Coverage**: Comprehensive unit and parameterized testing
- **Continuous Integration**: Automated testing with GitHub Actions

## üìÅ Project Structure

```
IS601_Module4/
‚îú‚îÄ‚îÄ app/
‚îÇ   ‚îú‚îÄ‚îÄ __init__.py
‚îÇ   ‚îú‚îÄ‚îÄ calculator/
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ __init__.py
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ calculator.py          # Main calculator logic and REPL interface
‚îÇ   ‚îú‚îÄ‚îÄ calculation/
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ __init__.py
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ calculation.py         # Calculation classes and factory
‚îÇ   ‚îî‚îÄ‚îÄ operation/
‚îÇ       ‚îú‚îÄ‚îÄ __init__.py
‚îÇ       ‚îî‚îÄ‚îÄ operations.py          # Arithmetic operation implementations
‚îú‚îÄ‚îÄ tests/
‚îÇ   ‚îú‚îÄ‚îÄ conftest.py               # Test configuration and fixtures
‚îÇ   ‚îú‚îÄ‚îÄ test_calculations.py     # Tests for calculation module
‚îÇ   ‚îú‚îÄ‚îÄ test_operations.py       # Tests for operations module
‚îÇ   ‚îî‚îÄ‚îÄ test_calculator.py       # Tests for calculator module
‚îú‚îÄ‚îÄ .github/
‚îÇ   ‚îî‚îÄ‚îÄ workflows/
‚îÇ       ‚îî‚îÄ‚îÄ python-app.yml       # GitHub Actions CI/CD configuration
‚îú‚îÄ‚îÄ main.py                      # Application entry point
‚îú‚îÄ‚îÄ requirements.txt             # Project dependencies
‚îî‚îÄ‚îÄ README.md                    # This file
```

## üõ†Ô∏è Installation and Setup

### Prerequisites

- Python 3.7 or higher
- pip (Python package installer)

### Local Setup

1. **Clone the repository:**
   ```bash
   git clone https://github.com/kk795-NJIT/IS601_Module4.git
   cd IS601_Module4
   ```

2. **Create and activate a virtual environment:**
   ```bash
   # Create virtual environment
   python -m venv venv
   
   # Activate virtual environment
   # On macOS/Linux:
   source venv/bin/activate
   # On Windows:
   # venv\Scripts\activate
   ```

3. **Install dependencies:**
   ```bash
   pip install -r requirements.txt
   ```

## üèÉ‚Äç‚ôÇÔ∏è Usage

### Running the Calculator

Execute the main application:
```bash
python main.py
```

### Basic Operations

The calculator supports various input formats:

```
Calculator> 5 + 3
Result: 5.0 + 3.0 = 8.0

Calculator> 10.5 * 2
Result: 10.5 * 2.0 = 21.0

Calculator> 15 div 3
Result: 15.0 / 3.0 = 5.0
```

### Supported Operations

| Operation | Symbols | Aliases |
|-----------|---------|---------|
| Addition | `+` | `add`, `addition` |
| Subtraction | `-` | `sub`, `subtract`, `subtraction` |
| Multiplication | `*` | `mul`, `multiply`, `multiplication` |
| Division | `/` | `div`, `divide`, `division` |

### Special Commands

- `help` - Display help information and usage instructions
- `history` - Show calculation history for the current session
- `clear` - Clear the calculation history
- `exit` or `quit` - Exit the calculator application

### Example Session

```
==================================================
   Professional Calculator Application
==================================================
Type 'help' for instructions, 'exit' to quit
Supported operations: +, -, *, /

Calculator> 5 + 3
Result: 5.0 + 3.0 = 8.0

Calculator> 10 * 2.5
Result: 10.0 * 2.5 = 25.0

Calculator> history
==============================
CALCULATION HISTORY
==============================
 1. 5.0 + 3.0 = 8.0
 2. 10.0 * 2.5 = 25.0
==============================

Calculator> exit
Goodbye!
```

## üß™ Testing

### Running Tests

Execute all tests:
```bash
pytest
```

Run tests with coverage report:
```bash
pytest --cov=app tests/ --cov-report=term-missing
```

Run specific test modules:
```bash
pytest tests/test_operations.py
pytest tests/test_calculations.py
pytest tests/test_calculator.py
```

### Test Coverage

The project maintains 100% test coverage across all modules:

- **Operation Tests**: Comprehensive testing of all arithmetic operations including edge cases
- **Calculation Tests**: Testing of calculation objects and factory patterns
- **Calculator Tests**: Full testing of REPL interface, command handling, and user interaction
- **Parameterized Tests**: Multiple input scenarios tested efficiently
- **Error Handling Tests**: Verification of proper error handling for invalid inputs

### Coverage Verification

Check coverage manually:
```bash
coverage run -m pytest tests/
coverage report
coverage html  # Generate HTML coverage report
```

## üèóÔ∏è Architecture and Design Patterns

### Object-Oriented Design

- **Encapsulation**: Data and methods are properly encapsulated within classes
- **Inheritance**: Abstract base class `Operation` defines interface for all operations
- **Polymorphism**: Operations implement common interface with different behaviors
- **Abstraction**: Complex calculator logic abstracted into manageable components

### Design Patterns

- **Factory Pattern**: `CalculationFactory` creates calculation instances
- **Strategy Pattern**: Different operation strategies for arithmetic calculations
- **Template Method**: Abstract `Operation` class defines operation interface
- **Singleton-like**: Operation registry provides centralized access to operations

### Error Handling Paradigms

- **LBYL (Look Before You Leap)**: Input validation before processing
- **EAFP (Easier to Ask Forgiveness than Permission)**: Exception handling for runtime errors

## üîÑ Continuous Integration

### GitHub Actions Workflow

The project includes automated CI/CD pipeline that:

1. **Environment Setup**: Configures Python environment
2. **Dependency Installation**: Installs required packages
3. **Test Execution**: Runs comprehensive test suite
4. **Coverage Verification**: Ensures 100% test coverage
5. **Build Validation**: Fails if coverage drops below 100%

### Workflow Configuration

Located in `.github/workflows/python-app.yml`, the workflow:
- Triggers on pushes and pull requests to main branch
- Uses latest Ubuntu environment
- Tests with Python 3.x
- Reports detailed coverage information
- Enforces coverage standards

## üìù Code Quality and Best Practices

### DRY Principle

- Reusable components across modules
- Centralized operation registry
- Shared validation logic
- Common error handling patterns

### Clean Code Practices

- Meaningful variable and function names
- Comprehensive docstrings and comments
- Consistent formatting and style
- Modular design with single responsibility

### Documentation Standards

- Class and method docstrings
- Type hints for better code clarity
- Inline comments for complex logic
- Comprehensive README documentation

## ü§ù Contributing

1. Fork the repository
2. Create a feature branch (`git checkout -b feature/amazing-feature`)
3. Commit your changes (`git commit -m 'Add some amazing feature'`)
4. Push to the branch (`git push origin feature/amazing-feature`)
5. Open a Pull Request

### Development Guidelines

- Maintain 100% test coverage
- Follow existing code style and patterns
- Add comprehensive tests for new features
- Update documentation as needed
- Ensure all CI checks pass

## üêõ Troubleshooting

### Common Issues

1. **Import Errors**: Ensure you're running from the project root directory
2. **Test Failures**: Check that all dependencies are installed correctly
3. **Coverage Issues**: Verify all code paths have corresponding tests

### Getting Help

- Check the built-in `help` command in the calculator
- Review test files for usage examples
- Examine the comprehensive docstrings in the source code

## üìÑ License

This project is part of IS601 Module 4 assignment. Please refer to your course guidelines for usage restrictions.

## üéØ Learning Outcomes Achieved

- **CLO6**: Implemented comprehensive object-oriented programming principles including:
  - Encapsulation through proper class design
  - Inheritance via abstract base classes
  - Polymorphism through operation strategy patterns
  - Abstraction of complex calculator functionality

## üë®‚Äçüíª Author

Developed as part of IS601 Module 4 Assignment - Professional Calculator Application

---

**Note**: This calculator application demonstrates professional software development practices including clean architecture, comprehensive testing, error handling, and continuous integration. It serves as an example of applying object-oriented programming principles in a real-world application context.
